//////////////////////////////////////////////////
//			Mixins 								//
//////////////////////////////////////////////////


// ============== BEM selectors ==================

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// ============= Image mixins =====================

@mixin img-center {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// ============= Flexbox Settings =================
@mixin 	container-flex {
	display: flex;
	flex-direction: column;
	@include mq(medium) {
		flex-direction: row;
		justify-content:space-between;
	}
}


// ============= Themed color classes =============

// UI theme colors for buttons, etc
@mixin ui-colors($map) {
	// $map = which color map to sort through	
	@each $theme, $color in $map {
    	@include m($theme) {
      		background-color: $color;
    	}
  	}
}

// Grid columns background colors
@mixin grid-colors($map) {
	// $map = which color map to sort through	
	$i : 1; // temporary increment variable
	@each $color in $map {
		@include e("col--#{$i}") {
      		background-color: $color;
			@extend %button;
    	}
		$i : $i + 1;
  	}
}

// ============= Media Queries ====================

@mixin mq($break) {
	// $break = media size, accepts small, medium, and large only. 
		// -any other value will throw an error
	@if $break == "small" {
	    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
		   	@content;
			}
	} @else if $break == "medium" {
		@media (min-width: $brkpoint--md + 1) {
		  	@content;
			}
	} @else if $break == "large" {
		@media (min-width: $brkpoint--lg) {
			@content;
			}
	} @else {
		@error "`#{$break}` is not an acceptable value. Must be 'small' 'medium' or 'large'. "
	}
}


// ============= Grid Columns ======================

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate and output the column modifier classes 
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
   margin-left: $margin;
   @content;
  }
}





